const FS = require('fs');
const Path = require('path');

const OUT_PATH = Path.resolve(__dirname, '../src/TokenStartTable.cpp');

function makeCharTable() {
  let table = [];

  for (let i = 0; i < 128; ++i) table[i] = 'error';
  for (let i = 65; i <= 90; ++i) table[i] = 'identifier';
  for (let i = 97; i <= 122; ++i) table[i] = 'identifier';

  function add(type, string) {
    string.split('').forEach(c => table[c.charCodeAt(0)] = type);
  }

  add('whitespace', '\t\v\f ');
  add('newline', '\r\n');
  add('digit', '123456789');
  add('punctuator', '<>+-*%&|^!~={[]();,:?');
  add('dot', '.');
  add('slash', '/');
  add('right_brace', '}');
  add('zero', '0');
  add('string', '"\'');
  add('backtick', '`');
  add('identifier', '$_\\');

  table.typeNames = [...new Set(table)];

  return table;
}

const table = makeCharTable();
const genDate = new Date().toISOString().replace(/T.*/, '');

const out = `\
// Generated by tools/generate-token-start.js ${ genDate }
export module TokenStartTable;

export enum class TokenStartType {
${ table.typeNames.map(name => `  ${ name },`).join('\n') }
};

export constexpr TokenStartType token_start_table[] {
${ table.map(type => `  TokenStartType::${ type },`).join('\n') }
};
`;


FS.writeFileSync(OUT_PATH, out);
