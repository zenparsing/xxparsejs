// Generated by tools/generate-tries.js 2019-03-18
export module TokenTrie;

import BasicTypes;
import Token;

export template<typename S>
struct TokenTrie {

  static Token match_punctuator(S& s, uint32 cp) {
    if (cp == '{') {
      return Token::left_brace;
    } else if (cp == '}') {
      return Token::right_brace;
    } else if (cp == '(') {
      return Token::left_paren;
    } else if (cp == ')') {
      return Token::right_paren;
    } else if (cp == '[') {
      return Token::left_bracket;
    } else if (cp == ']') {
      return Token::right_bracket;
    } else if (cp == ';') {
      return Token::semicolon;
    } else if (cp == ':') {
      return Token::colon;
    } else if (cp == ',') {
      return Token::comma;
    } else if (cp == '?') {
      return Token::question;
    } else if (cp == '&') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        return Token::bitwise_and_assign;
      } else if (n == '&') {
        s.advance();
        return Token::logical_and;
      }
      return Token::bitwise_and;
    } else if (cp == '|') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        return Token::bitwise_or_assign;
      } else if (n == '|') {
        s.advance();
        return Token::logical_or;
      }
      return Token::bitwise_or;
    } else if (cp == '^') {
      if (s.peek() == '=') {
        s.advance();
        return Token::bitwise_xor_assign;
      }
      return Token::bitwise_xor;
    } else if (cp == '~') {
      if (s.peek() == '=') {
        s.advance();
        return Token::bitwise_not_assign;
      }
      return Token::bitwise_not;
    } else if (cp == '<') {
      if (auto n = s.peek(); n == '<') {
        s.advance();
        if (auto n = s.peek(); n == '=') {
          s.advance();
          return Token::left_shift_assign;
        } else if (n == '<') {
          s.advance();
          if (s.peek() == '=') {
            s.advance();
            return Token::left_shift_zero_assign;
          }
          return Token::left_shift_zero;
        }
        return Token::left_shift;
      } else if (n == '=') {
        s.advance();
        return Token::less_than_equal;
      }
      return Token::less_than;
    } else if (cp == '>') {
      if (auto n = s.peek(); n == '>') {
        s.advance();
        if (auto n = s.peek(); n == '=') {
          s.advance();
          return Token::right_shift_assign;
        } else if (n == '>') {
          s.advance();
          if (s.peek() == '=') {
            s.advance();
            return Token::right_shift_zero_assign;
          }
          return Token::right_shift_zero;
        }
        return Token::right_shift;
      } else if (n == '=') {
        s.advance();
        return Token::greater_than_equal;
      }
      return Token::greater_than;
    } else if (cp == '+') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        return Token::plus_assign;
      } else if (n == '+') {
        s.advance();
        return Token::increment;
      }
      return Token::plus;
    } else if (cp == '-') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        return Token::minus_assign;
      } else if (n == '-') {
        s.advance();
        return Token::decrement;
      }
      return Token::minus;
    } else if (cp == '*') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        return Token::multiply_assign;
      } else if (n == '*') {
        s.advance();
        if (s.peek() == '=') {
          s.advance();
          return Token::pow_assign;
        }
        return Token::pow;
      }
      return Token::multiply;
    } else if (cp == '/') {
      if (s.peek() == '=') {
        s.advance();
        return Token::divide_assign;
      }
      return Token::divide;
    } else if (cp == '%') {
      if (s.peek() == '=') {
        s.advance();
        return Token::mod_assign;
      }
      return Token::mod;
    } else if (cp == '!') {
      if (s.peek() == '=') {
        s.advance();
        if (s.peek() == '=') {
          s.advance();
          return Token::strict_not_equal;
        }
        return Token::not_equal;
      }
      return Token::logical_not;
    } else if (cp == '=') {
      if (auto n = s.peek(); n == '=') {
        s.advance();
        if (s.peek() == '=') {
          s.advance();
          return Token::strict_equal;
        }
        return Token::equal;
      } else if (n == '>') {
        s.advance();
        return Token::fat_arrow;
      }
      return Token::assign;
    } else if (cp == '.') {
      if (s.peek() == '.') {
        s.advance();
        if (s.peek() == '.') {
          s.advance();
          return Token::dot_3;
        }
        return Token::error;
      }
      return Token::dot;
    }
    return Token::error;
  }

  static Token match_keyword(S& s, uint32 cp) {
    if (cp == 'b') {
      if (auto n = s.peek(); n == 'e') {
        s.advance();
        if (s.peek() == 'g') {
          s.advance();
          if (s.peek() == 'i') {
            s.advance();
            if (s.peek() == 'n') {
              s.advance();
              return Token::kw_begin;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'r') {
        s.advance();
        if (s.peek() == 'e') {
          s.advance();
          if (s.peek() == 'a') {
            s.advance();
            if (s.peek() == 'k') {
              s.advance();
              return Token::kw_break;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'c') {
      if (auto n = s.peek(); n == 'a') {
        s.advance();
        if (auto n = s.peek(); n == 's') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            return Token::kw_case;
          }
          return Token::error;
        } else if (n == 't') {
          s.advance();
          if (s.peek() == 'c') {
            s.advance();
            if (s.peek() == 'h') {
              s.advance();
              return Token::kw_catch;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'l') {
        s.advance();
        if (s.peek() == 'a') {
          s.advance();
          if (s.peek() == 's') {
            s.advance();
            if (s.peek() == 's') {
              s.advance();
              return Token::kw_class;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'o') {
        s.advance();
        if (s.peek() == 'n') {
          s.advance();
          if (auto n = s.peek(); n == 's') {
            s.advance();
            if (s.peek() == 't') {
              s.advance();
              return Token::kw_const;
            }
            return Token::error;
          } else if (n == 't') {
            s.advance();
            if (s.peek() == 'i') {
              s.advance();
              if (s.peek() == 'n') {
                s.advance();
                if (s.peek() == 'u') {
                  s.advance();
                  if (s.peek() == 'e') {
                    s.advance();
                    return Token::kw_continue;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'd') {
      if (auto n = s.peek(); n == 'e') {
        s.advance();
        if (auto n = s.peek(); n == 'b') {
          s.advance();
          if (s.peek() == 'u') {
            s.advance();
            if (s.peek() == 'g') {
              s.advance();
              if (s.peek() == 'g') {
                s.advance();
                if (s.peek() == 'e') {
                  s.advance();
                  if (s.peek() == 'r') {
                    s.advance();
                    return Token::kw_debugger;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        } else if (n == 'f') {
          s.advance();
          if (s.peek() == 'a') {
            s.advance();
            if (s.peek() == 'u') {
              s.advance();
              if (s.peek() == 'l') {
                s.advance();
                if (s.peek() == 't') {
                  s.advance();
                  return Token::kw_default;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        } else if (n == 'l') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            if (s.peek() == 't') {
              s.advance();
              if (s.peek() == 'e') {
                s.advance();
                return Token::kw_delete;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'o') {
        s.advance();
        return Token::kw_do;
      }
      return Token::error;
    } else if (cp == 'e') {
      if (auto n = s.peek(); n == 'l') {
        s.advance();
        if (s.peek() == 's') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            return Token::kw_else;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'n') {
        s.advance();
        if (auto n = s.peek(); n == 'u') {
          s.advance();
          if (s.peek() == 'm') {
            s.advance();
            return Token::kw_enum;
          }
          return Token::error;
        } else if (n == 'd') {
          s.advance();
          return Token::kw_end;
        }
        return Token::error;
      } else if (n == 'x') {
        s.advance();
        if (auto n = s.peek(); n == 'p') {
          s.advance();
          if (s.peek() == 'o') {
            s.advance();
            if (s.peek() == 'r') {
              s.advance();
              if (s.peek() == 't') {
                s.advance();
                return Token::kw_export;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        } else if (n == 't') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            if (s.peek() == 'n') {
              s.advance();
              if (s.peek() == 'd') {
                s.advance();
                if (s.peek() == 's') {
                  s.advance();
                  return Token::kw_extends;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'f') {
      if (auto n = s.peek(); n == 'a') {
        s.advance();
        if (s.peek() == 'l') {
          s.advance();
          if (s.peek() == 's') {
            s.advance();
            if (s.peek() == 'e') {
              s.advance();
              return Token::kw_false;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'i') {
        s.advance();
        if (s.peek() == 'n') {
          s.advance();
          if (s.peek() == 'a') {
            s.advance();
            if (s.peek() == 'l') {
              s.advance();
              if (s.peek() == 'l') {
                s.advance();
                if (s.peek() == 'y') {
                  s.advance();
                  return Token::kw_finally;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'o') {
        s.advance();
        if (s.peek() == 'r') {
          s.advance();
          return Token::kw_for;
        }
        return Token::error;
      } else if (n == 'u') {
        s.advance();
        if (s.peek() == 'n') {
          s.advance();
          if (s.peek() == 'c') {
            s.advance();
            if (s.peek() == 't') {
              s.advance();
              if (s.peek() == 'i') {
                s.advance();
                if (s.peek() == 'o') {
                  s.advance();
                  if (s.peek() == 'n') {
                    s.advance();
                    return Token::kw_function;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'r') {
        s.advance();
        if (s.peek() == 'o') {
          s.advance();
          if (s.peek() == 'm') {
            s.advance();
            return Token::kw_from;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'i') {
      if (auto n = s.peek(); n == 'f') {
        s.advance();
        return Token::kw_if;
      } else if (n == 'm') {
        s.advance();
        if (s.peek() == 'p') {
          s.advance();
          if (auto n = s.peek(); n == 'o') {
            s.advance();
            if (s.peek() == 'r') {
              s.advance();
              if (s.peek() == 't') {
                s.advance();
                return Token::kw_import;
              }
              return Token::error;
            }
            return Token::error;
          } else if (n == 'l') {
            s.advance();
            if (s.peek() == 'e') {
              s.advance();
              if (s.peek() == 'm') {
                s.advance();
                if (s.peek() == 'e') {
                  s.advance();
                  if (s.peek() == 'n') {
                    s.advance();
                    if (s.peek() == 't') {
                      s.advance();
                      if (s.peek() == 's') {
                        s.advance();
                        return Token::kw_implements;
                      }
                      return Token::error;
                    }
                    return Token::error;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'n') {
        s.advance();
        if (auto n = s.peek(); n == 's') {
          s.advance();
          if (s.peek() == 't') {
            s.advance();
            if (s.peek() == 'a') {
              s.advance();
              if (s.peek() == 'n') {
                s.advance();
                if (s.peek() == 'c') {
                  s.advance();
                  if (s.peek() == 'e') {
                    s.advance();
                    if (s.peek() == 'o') {
                      s.advance();
                      if (s.peek() == 'f') {
                        s.advance();
                        return Token::kw_instanceof;
                      }
                      return Token::error;
                    }
                    return Token::error;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        } else if (n == 't') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            if (s.peek() == 'r') {
              s.advance();
              if (s.peek() == 'f') {
                s.advance();
                if (s.peek() == 'a') {
                  s.advance();
                  if (s.peek() == 'c') {
                    s.advance();
                    if (s.peek() == 'e') {
                      s.advance();
                      return Token::kw_interface;
                    }
                    return Token::error;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::kw_in;
      }
      return Token::error;
    } else if (cp == 'n') {
      if (auto n = s.peek(); n == 'e') {
        s.advance();
        if (s.peek() == 'w') {
          s.advance();
          return Token::kw_new;
        }
        return Token::error;
      } else if (n == 'u') {
        s.advance();
        if (s.peek() == 'l') {
          s.advance();
          if (s.peek() == 'l') {
            s.advance();
            return Token::kw_null;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'r') {
      if (s.peek() == 'e') {
        s.advance();
        if (s.peek() == 't') {
          s.advance();
          if (s.peek() == 'u') {
            s.advance();
            if (s.peek() == 'r') {
              s.advance();
              if (s.peek() == 'n') {
                s.advance();
                return Token::kw_return;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 's') {
      if (auto n = s.peek(); n == 'u') {
        s.advance();
        if (s.peek() == 'p') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            if (s.peek() == 'r') {
              s.advance();
              return Token::kw_super;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'w') {
        s.advance();
        if (s.peek() == 'i') {
          s.advance();
          if (s.peek() == 't') {
            s.advance();
            if (s.peek() == 'c') {
              s.advance();
              if (s.peek() == 'h') {
                s.advance();
                return Token::kw_switch;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 't') {
        s.advance();
        if (s.peek() == 'a') {
          s.advance();
          if (s.peek() == 't') {
            s.advance();
            if (s.peek() == 'i') {
              s.advance();
              if (s.peek() == 'c') {
                s.advance();
                return Token::kw_static;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 't') {
      if (auto n = s.peek(); n == 'h') {
        s.advance();
        if (auto n = s.peek(); n == 'i') {
          s.advance();
          if (s.peek() == 's') {
            s.advance();
            return Token::kw_this;
          }
          return Token::error;
        } else if (n == 'r') {
          s.advance();
          if (s.peek() == 'o') {
            s.advance();
            if (s.peek() == 'w') {
              s.advance();
              return Token::kw_throw;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'r') {
        s.advance();
        if (auto n = s.peek(); n == 'u') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            return Token::kw_true;
          }
          return Token::error;
        } else if (n == 'y') {
          s.advance();
          return Token::kw_try;
        }
        return Token::error;
      } else if (n == 'y') {
        s.advance();
        if (s.peek() == 'p') {
          s.advance();
          if (s.peek() == 'e') {
            s.advance();
            if (s.peek() == 'o') {
              s.advance();
              if (s.peek() == 'f') {
                s.advance();
                return Token::kw_typeof;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'v') {
      if (auto n = s.peek(); n == 'a') {
        s.advance();
        if (s.peek() == 'r') {
          s.advance();
          return Token::kw_var;
        }
        return Token::error;
      } else if (n == 'o') {
        s.advance();
        if (s.peek() == 'i') {
          s.advance();
          if (s.peek() == 'd') {
            s.advance();
            return Token::kw_void;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'w') {
      if (auto n = s.peek(); n == 'h') {
        s.advance();
        if (s.peek() == 'i') {
          s.advance();
          if (s.peek() == 'l') {
            s.advance();
            if (s.peek() == 'e') {
              s.advance();
              return Token::kw_while;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'i') {
        s.advance();
        if (s.peek() == 't') {
          s.advance();
          if (s.peek() == 'h') {
            s.advance();
            return Token::kw_with;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'p') {
      if (auto n = s.peek(); n == 'r') {
        s.advance();
        if (auto n = s.peek(); n == 'i') {
          s.advance();
          if (s.peek() == 'v') {
            s.advance();
            if (s.peek() == 'a') {
              s.advance();
              if (s.peek() == 't') {
                s.advance();
                if (s.peek() == 'e') {
                  s.advance();
                  return Token::kw_private;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        } else if (n == 'o') {
          s.advance();
          if (s.peek() == 't') {
            s.advance();
            if (s.peek() == 'e') {
              s.advance();
              if (s.peek() == 'c') {
                s.advance();
                if (s.peek() == 't') {
                  s.advance();
                  if (s.peek() == 'e') {
                    s.advance();
                    if (s.peek() == 'd') {
                      s.advance();
                      return Token::kw_protected;
                    }
                    return Token::error;
                  }
                  return Token::error;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'u') {
        s.advance();
        if (s.peek() == 'b') {
          s.advance();
          if (s.peek() == 'l') {
            s.advance();
            if (s.peek() == 'i') {
              s.advance();
              if (s.peek() == 'c') {
                s.advance();
                return Token::kw_public;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      } else if (n == 'a') {
        s.advance();
        if (s.peek() == 'c') {
          s.advance();
          if (s.peek() == 'k') {
            s.advance();
            if (s.peek() == 'a') {
              s.advance();
              if (s.peek() == 'g') {
                s.advance();
                if (s.peek() == 'e') {
                  s.advance();
                  return Token::kw_package;
                }
                return Token::error;
              }
              return Token::error;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'l') {
      if (s.peek() == 'e') {
        s.advance();
        if (s.peek() == 't') {
          s.advance();
          return Token::kw_let;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'y') {
      if (s.peek() == 'i') {
        s.advance();
        if (s.peek() == 'e') {
          s.advance();
          if (s.peek() == 'l') {
            s.advance();
            if (s.peek() == 'd') {
              s.advance();
              return Token::kw_yield;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'a') {
      if (auto n = s.peek(); n == 's') {
        s.advance();
        if (s.peek() == 'y') {
          s.advance();
          if (s.peek() == 'n') {
            s.advance();
            if (s.peek() == 'c') {
              s.advance();
              return Token::kw_async;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::kw_as;
      } else if (n == 'w') {
        s.advance();
        if (s.peek() == 'a') {
          s.advance();
          if (s.peek() == 'i') {
            s.advance();
            if (s.peek() == 't') {
              s.advance();
              return Token::kw_await;
            }
            return Token::error;
          }
          return Token::error;
        }
        return Token::error;
      }
      return Token::error;
    } else if (cp == 'o') {
      if (s.peek() == 'f') {
        s.advance();
        return Token::kw_of;
      }
      return Token::error;
    }
    return Token::error;
  }

};
